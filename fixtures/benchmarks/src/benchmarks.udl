namespace benchmarks {
  // Run all benchmarks and print the results to stdout
  void run_benchmarks(string language_name, TestCallbackInterface cb);

  // Test functions
  //
  // These are intended to test the overhead of Rust function calls including:
  // popping arguments from the stack, unpacking RustBuffers, pushing return
  // values back to the stack, etc.

  string test_function(i32 a, i32 b, TestData data); // Should return data.bar
  void test_void_return(i32 a, i32 b, TestData data);
  void test_no_args_void_return();
};

dictionary TestData {
  string foo;
  string bar;
};

enum TestCase {
  "Function",
  "VoidReturn",
  "NoArgsVoidReturn",
};

callback interface TestCallbackInterface {
  // Test callback methods.
  //
  // These are intended to test the overhead of callback interface calls
  // including: popping arguments from the stack, unpacking RustBuffers,
  // pushing return values back to the stack, etc.

  string method(i32 a, i32 b, TestData data);  // Should return data.bar
  void method_with_void_return(i32 a, i32 b, TestData data);
  void method_with_no_args_and_void_return();

  // Run a performance test N times and return the elapsed time in nanoseconds
  u64 run_test(TestCase test_case, u64 count);
};
