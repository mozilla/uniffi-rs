namespace coverall {
    SimpleDict create_some_dict();
    SimpleDict create_none_dict();

    u64 get_num_alive();
};

dictionary SimpleDict {
    string text;
    string? maybe_text;
    boolean	a_bool;
    boolean? maybe_a_bool;
    u8 unsigned8;
    u8? maybe_unsigned8;
    u64 unsigned64;
    u64? maybe_unsigned64;
    i8 signed8;
    i8? maybe_signed8;
    i64 signed64;
    i64? maybe_signed64;
    float float32;
    float? maybe_float32;
    double float64;
    double? maybe_float64;
};

[Error]
enum CoverallError {
    "TooManyHoles"
};

interface Coveralls {
    constructor(string name);

    // Either constructs a new object or throws an error.
    [Throws=CoverallError, Name="fallible_new"]
    constructor(string name, boolean should_fail);

    // Always panics, just to test panics in ctors are handled.
    [Name="panicing_new"]
    constructor(string message);

    string get_name();

    [Throws=CoverallError]
    boolean maybe_throw(boolean should_throw);

    void panic(string message);

    // *** Test functions which take either `self` or other params as `Arc<Self>` ***

    /// Calls `Arc::strong_count()` on the `Arc` containing `self`.
    [Self=ByArc]
    u64 strong_count();
};

interface ThreadsafeCounter {
  void busy_wait(i32 ms);
  i32 increment_if_busy();
};
