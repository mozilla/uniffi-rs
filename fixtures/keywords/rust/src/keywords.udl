// Nominally checking Rust keywords, but we try and use as many from
// Python as well to kill two birds with one stone.

namespace keywords_rust {
    void if(u8 async);
};

interface break {
    return return(return v);
    sequence<continue>? continue(sequence<continue> continue);
    record<u8, break>? break(record<u8, break> v);
    void yield(u8 async);
    void async(u8? yield);
};

callback interface continue {
    return return(return v);
    continue? continue(sequence<continue> continue);
    record<u8, break> break(break? v);
    while while(sequence<while> while);
    record<u8, sequence<yield>>? yield(record<u8, sequence<yield>> v);
};

dictionary return {
    u8 yield;
    u8? async;
};

dictionary while {
    return return;
    sequence<continue> continue;
    record<u8, break> break;
    break? for;
    sequence<return> async;
};

[Enum]
interface async {
    as(u8 async);
};

[Error]
enum yield {
    "async",
};

[Error]
interface for {
   return(return return);
   yield(u8 async);
};
