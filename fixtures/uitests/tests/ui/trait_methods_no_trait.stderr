error[E0277]: `TraitMethods` doesn't implement `std::fmt::Display`
 --> $OUT_DIR[uniffi_uitests]/trait_methods.uniffi.rs
  |
  | ...   uniffi::deps::static_assertions::assert_impl_all!(r#TraitMethods: std::fmt::Display); // This object has a trait method which requi...
  |                                                         ^^^^^^^^^^^^^^ `TraitMethods` cannot be formatted with the default formatter
  |
  = help: the trait `std::fmt::Display` is not implemented for `TraitMethods`
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
note: required by a bound in `uniffi_trait_methods_fn_method_traitmethods_uniffi_trait_display::{closure#0}::_::{closure#0}::assert_impl_all`
 --> $OUT_DIR[uniffi_uitests]/trait_methods.uniffi.rs
  |
  | ...   uniffi::deps::static_assertions::assert_impl_all!(r#TraitMethods: std::fmt::Display); // This object has a trait method which requi...
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `assert_impl_all`
  = note: this error originates in the macro `uniffi::deps::static_assertions::assert_impl_all` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `TraitMethods` doesn't implement `std::fmt::Display`
 --> $OUT_DIR[uniffi_uitests]/trait_methods.uniffi.rs
  |
  | /                 match<std::sync::Arc<r#TraitMethods> as ::uniffi::FfiConverter<crate::UniFfiTag>>::try_lift(r#ptr) {
  | |                     Ok(ref val) => val,
  | |                     Err(err) => panic!("Failed to convert arg '{}': {}", "ptr", err),
  | |                 }
  | |_________________^ `TraitMethods` cannot be formatted with the default formatter
  |
  = help: the trait `std::fmt::Display` is not implemented for `TraitMethods`
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = help: the trait `std::fmt::Display` is implemented for `Arc<T>`
  = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)
