// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#ifndef mozilla_dom_{{ context.namespace()|header_name_cpp(context) }}_Shared
#define mozilla_dom_{{ context.namespace()|header_name_cpp(context) }}_Shared

#include <functional>

#include "nsDebug.h"
#include "nsTArray.h"
#include "prnetdb.h"

#include "mozilla/Casting.h"
#include "mozilla/CheckedInt.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Utf8.h"

#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Record.h"
#include "mozilla/dom/{{ context.namespace()|header_name_cpp(context) }}Binding.h"

{% include "FFIDeclarationsTemplate.h" %}

namespace mozilla {
namespace dom {

{% include "RustBufferHelper.h" %}

namespace {{ context.detail_name() }} {

{% for e in ci.iter_enum_definitions() %}
{% if !e.is_flat() %}
MOZ_STATIC_ASSERT(false, "Sorry the gecko-js backend does not yet support enums with associated data: {{ e.name() }}");
{% else %}
template <>
struct Serializable<{{ e.name()|class_name_cpp(context) }}> {
  [[nodiscard]] static bool ReadFrom(Reader& aReader, {{ e.name()|class_name_cpp(context) }}& aValue) {
    auto variant = aReader.ReadInt32();
    switch (variant) {
      {% for variant in e.variants() -%}
      case {{ loop.index }}:
        aValue = {{ e.name()|class_name_cpp(context) }}::{{ variant.name()|enum_variant_cpp }};
        break;
      {% endfor -%}
      default:
        MOZ_ASSERT(false, "Unexpected enum case");
        return false;
    }
    return true;
  }

  static void WriteInto(Writer& aWriter, const {{ e.name()|class_name_cpp(context) }}& aValue) {
    switch (aValue) {
      {% for variant in e.variants() -%}
      case {{ e.name()|class_name_cpp(context) }}::{{ variant.name()|enum_variant_cpp }}:
        aWriter.WriteInt32({{ loop.index }});
      {% endfor -%}
      default:
        MOZ_ASSERT(false, "Unknown raw enum value");
    }
  }
};
{% endif %}
{% endfor %}

{% for rec in ci.iter_record_definitions() -%}
template <>
struct Serializable<{{ rec.name()|class_name_cpp(context) }}> {
  [[nodiscard]] static bool ReadFrom(Reader& aReader, {{ rec.name()|class_name_cpp(context) }}& aValue) {
    {%- for field in rec.fields() %}
    if (!Serializable<{{ field.webidl_type()|type_cpp(context) }}>::ReadFrom(aReader, aValue.{{ field.name()|field_name_cpp }})) {
      return false;
    }
    {%- endfor %}
    return true;
  }

  static void WriteInto(Writer& aWriter, const {{ rec.name()|class_name_cpp(context) }}& aValue) {
    {%- for field in rec.fields() %}
    Serializable<{{ field.webidl_type()|type_cpp(context) }}>::WriteInto(aWriter, aValue.{{ field.name()|field_name_cpp }});
    {%- endfor %}
  }
};
{% endfor %}

}  // namespace {{ context.detail_name() }}

}  // namespace dom
}  // namespace mozilla

#endif  // mozilla_dom_{{ context.namespace()|header_name_cpp(context) }}_Shared
