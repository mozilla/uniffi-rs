// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation
{%- for imported_class in self.imports() %}
import {{ imported_class }}
{%- endfor %}

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport({{ config.ffi_module_name() }})
import {{ config.ffi_module_name() }}
#endif

{% include "RustBufferTemplate.swift" %}
{% include "Helpers.swift" %}
{% include "RustBufferHelper.swift" %}

// Public interface members begin here.
{% for code in self.declaration_code() %}
{{ code }}
{%- endfor %}
{% import "macros.swift" as swift %}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum {{ config.module_name()|class_name_swift }}Lifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
        {% let initialization_code = self.initialization_code() -%}
        {% if !initialization_code.is_empty() %}
        {% for code in self.initialization_code() -%}
        {{ code }}
        {% endfor -%}
        {% else %}
        // No initialization code needed
        {% endif %}
    }
}
