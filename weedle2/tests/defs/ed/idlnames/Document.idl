// Source: DOM Standard (https://dom.spec.whatwg.org/)
[Exposed=Window]
interface Document : Node {
  constructor();

  [SameObject] readonly attribute DOMImplementation implementation;
  readonly attribute USVString URL;
  readonly attribute USVString documentURI;
  readonly attribute DOMString compatMode;
  readonly attribute DOMString characterSet;
  readonly attribute DOMString charset; // legacy alias of .characterSet
  readonly attribute DOMString inputEncoding; // legacy alias of .characterSet
  readonly attribute DOMString contentType;

  readonly attribute DocumentType? doctype;
  readonly attribute Element? documentElement;
  HTMLCollection getElementsByTagName(DOMString qualifiedName);
  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);
  HTMLCollection getElementsByClassName(DOMString classNames);

  [CEReactions, NewObject] Element createElement(DOMString localName, optional (DOMString or ElementCreationOptions) options = {});
  [CEReactions, NewObject] Element createElementNS(DOMString? namespace, DOMString qualifiedName, optional (DOMString or ElementCreationOptions) options = {});
  [NewObject] DocumentFragment createDocumentFragment();
  [NewObject] Text createTextNode(DOMString data);
  [NewObject] CDATASection createCDATASection(DOMString data);
  [NewObject] Comment createComment(DOMString data);
  [NewObject] ProcessingInstruction createProcessingInstruction(DOMString target, DOMString data);

  [CEReactions, NewObject] Node importNode(Node node, optional boolean deep = false);
  [CEReactions] Node adoptNode(Node node);

  [NewObject] Attr createAttribute(DOMString localName);
  [NewObject] Attr createAttributeNS(DOMString? namespace, DOMString qualifiedName);

  [NewObject] Event createEvent(DOMString interface); // legacy

  [NewObject] Range createRange();

  // NodeFilter.SHOW_ALL = 0xFFFFFFFF
  [NewObject] NodeIterator createNodeIterator(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);
  [NewObject] TreeWalker createTreeWalker(Node root, optional unsigned long whatToShow = 0xFFFFFFFF, optional NodeFilter? filter = null);
};

// Source: DOM Standard (https://dom.spec.whatwg.org/)
Document includes NonElementParentNode;

// Source: DOM Standard (https://dom.spec.whatwg.org/)
Document includes DocumentOrShadowRoot;

// Source: DOM Standard (https://dom.spec.whatwg.org/)
Document includes ParentNode;

// Source: DOM Standard (https://dom.spec.whatwg.org/)
Document includes XPathEvaluatorBase;

// Source: Font Metrics API Level 1 (https://drafts.css-houdini.org/font-metrics-api-1/)
partial interface Document {
    FontMetrics measureElement(Element element);
    FontMetrics measureText(DOMString text, StylePropertyMapReadOnly styleMap);
};

// Source: Fullscreen API Standard (https://fullscreen.spec.whatwg.org/)
partial interface Document {
  [LegacyLenientSetter] readonly attribute boolean fullscreenEnabled;
  [LegacyLenientSetter, Unscopable] readonly attribute boolean fullscreen; // historical

  Promise<undefined> exitFullscreen();

  attribute EventHandler onfullscreenchange;
  attribute EventHandler onfullscreenerror;
};

// Source: HTML Standard (https://html.spec.whatwg.org/multipage/)
[LegacyOverrideBuiltIns]
partial interface Document {
  // resource metadata management
  [PutForwards=href, LegacyUnforgeable] readonly attribute Location? location;
  attribute USVString domain;
  readonly attribute USVString referrer;
  attribute USVString cookie;
  readonly attribute DOMString lastModified;
  readonly attribute DocumentReadyState readyState;

  // DOM tree accessors
  getter object (DOMString name);
  [CEReactions] attribute DOMString title;
  [CEReactions] attribute DOMString dir;
  [CEReactions] attribute HTMLElement? body;
  readonly attribute HTMLHeadElement? head;
  [SameObject] readonly attribute HTMLCollection images;
  [SameObject] readonly attribute HTMLCollection embeds;
  [SameObject] readonly attribute HTMLCollection plugins;
  [SameObject] readonly attribute HTMLCollection links;
  [SameObject] readonly attribute HTMLCollection forms;
  [SameObject] readonly attribute HTMLCollection scripts;
  NodeList getElementsByName(DOMString elementName);
  readonly attribute HTMLOrSVGScriptElement? currentScript; // classic scripts in a document tree only

  // dynamic markup insertion
  [CEReactions] Document open(optional DOMString unused1, optional DOMString unused2); // both arguments are ignored
  WindowProxy? open(USVString url, DOMString name, DOMString features);
  [CEReactions] undefined close();
  [CEReactions] undefined write(DOMString... text);
  [CEReactions] undefined writeln(DOMString... text);

  // user interaction
  readonly attribute WindowProxy? defaultView;
  boolean hasFocus();
  [CEReactions] attribute DOMString designMode;
  [CEReactions] boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = "");
  boolean queryCommandEnabled(DOMString commandId);
  boolean queryCommandIndeterm(DOMString commandId);
  boolean queryCommandState(DOMString commandId);
  boolean queryCommandSupported(DOMString commandId);
  DOMString queryCommandValue(DOMString commandId);
  readonly attribute boolean hidden;
  readonly attribute DocumentVisibilityState visibilityState;

  // special event handler IDL attributes that only apply to Document objects
  [LegacyLenientThis] attribute EventHandler onreadystatechange;
  attribute EventHandler onvisibilitychange;

  // also has obsolete members
};

// Source: HTML Standard (https://html.spec.whatwg.org/multipage/)
Document includes GlobalEventHandlers;

// Source: HTML Standard (https://html.spec.whatwg.org/multipage/)
partial interface Document {
  [CEReactions] attribute [LegacyNullToEmptyString] DOMString fgColor;
  [CEReactions] attribute [LegacyNullToEmptyString] DOMString linkColor;
  [CEReactions] attribute [LegacyNullToEmptyString] DOMString vlinkColor;
  [CEReactions] attribute [LegacyNullToEmptyString] DOMString alinkColor;
  [CEReactions] attribute [LegacyNullToEmptyString] DOMString bgColor;

  [SameObject] readonly attribute HTMLCollection anchors;
  [SameObject] readonly attribute HTMLCollection applets;

  undefined clear();
  undefined captureEvents();
  undefined releaseEvents();

  [SameObject] readonly attribute HTMLAllCollection all;
};

// Source: requestStorageAccessForOrigin API (https://privacycg.github.io/requestStorageAccessForOrigin/)
partial interface Document {
  Promise<undefined> requestStorageAccessForOrigin(USVString requestedOrigin);
};

// Source: The Storage Access API (https://privacycg.github.io/storage-access/)
partial interface Document {
  Promise<boolean> hasStorageAccess();
  Promise<undefined> requestStorageAccess();
};

// Source: Prerendering Revamped (https://wicg.github.io/nav-speculation/prerendering.html)
partial interface Document {
    readonly attribute boolean prerendering;

    // Under "special event handler IDL attributes that only apply to Document objects"
    attribute EventHandler onprerenderingchange;
};

// Source: Page Lifecycle (https://wicg.github.io/page-lifecycle/)
partial interface Document {
    attribute EventHandler onfreeze;
    attribute EventHandler onresume;
    readonly attribute boolean wasDiscarded;
};

// Source: Text Fragments (https://wicg.github.io/scroll-to-text-fragment/)
partial interface Document {
    [SameObject] readonly attribute FragmentDirective fragmentDirective;
};

// Source: CSS Font Loading Module Level 3 (https://www.w3.org/TR/css-font-loading-3/)
Document includes FontFaceSource;

// Source: CSS Regions Module Level 1 (https://www.w3.org/TR/css-regions-1/)
partial interface Document {
  readonly attribute NamedFlowMap namedFlows;
};

// Source: CSS View Transitions Module Level 1 (https://www.w3.org/TR/css-view-transitions-1/)
partial interface Document {
  ViewTransition startViewTransition(optional UpdateCallback? updateCallback = null);
};

// Source: CSSOM View Module (https://www.w3.org/TR/cssom-view-1/)
partial interface Document {
  Element? elementFromPoint(double x, double y);
  sequence<Element> elementsFromPoint(double x, double y);
  CaretPosition? caretPositionFromPoint(double x, double y);
  readonly attribute Element? scrollingElement;
};

// Source: CSSOM View Module (https://www.w3.org/TR/cssom-view-1/)
Document includes GeometryUtils;

// Source: Permissions Policy (https://www.w3.org/TR/permissions-policy-1/)
partial interface Document {
    [SameObject] readonly attribute PermissionsPolicy permissionsPolicy;
};

// Source: Picture-in-Picture (https://www.w3.org/TR/picture-in-picture/)
partial interface Document {
  readonly attribute boolean pictureInPictureEnabled;

  [NewObject] Promise<undefined> exitPictureInPicture();
};

// Source: Pointer Lock 2.0 (https://www.w3.org/TR/pointerlock-2/)
partial interface Document {
  attribute EventHandler onpointerlockchange;
  attribute EventHandler onpointerlockerror;
  undefined exitPointerLock();
};

// Source: Selection API (https://www.w3.org/TR/selection-api/)
partial interface Document {
  Selection? getSelection();
};

// Source: Scalable Vector Graphics (SVG) 2 (https://www.w3.org/TR/SVG2/)
partial interface Document {
  readonly attribute SVGSVGElement? rootElement;
};

// Source: Web Animations (https://www.w3.org/TR/web-animations-1/)
partial interface Document {
    readonly attribute DocumentTimeline timeline;
};